name: CI

on: [push]

defaults:
  run:
    working-directory: ./

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      - run: yarn build

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('./lhci_reports/manifest.json'));
            let comments = '';
            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const details = JSON.parse(fs.readFileSync(jsonPath));
              const { audits } = details;
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach((key) => (summary[key] = formatResult(summary[key])));

              const score = (res) => (res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥');
              const comment = [
                `‚ö°Ô∏è MOZI Lighthouse ÏÑ±Îä• Ï∏°Ï†ï Í≤∞Í≥º`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                `| ${score(summary.accessibility)} Accessibility | ${summary.accessibility} |`,
                `| ${score(summary['best-practices'])} Best-Practices | ${summary['best-practices']} |`,
                `| ${score(summary.seo)} SEO | ${summary.seo} |`,
                `| ${score(summary.pwa)} PWA | ${summary.pwa} |`,
              ].join('\n');
              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(audits['first-contentful-paint'].score * 100)} First Contentful Paint | ${
                  audits['first-contentful-paint'].displayValue
                } |`,
                `| ${score(audits['largest-contentful-paint'].score * 100)} Largest Contentful Paint | ${
                  audits['largest-contentful-paint'].displayValue
                } |`,
                `| ${score(audits['first-meaningful-paint'].score * 100)} First Meaningful Paint | ${
                  audits['first-meaningful-paint'].displayValue
                } |`,
                `| ${score(audits['speed-index'].score * 100)} Speed Index | ${audits['speed-index'].displayValue} |`,
                `| ${score(audits['total-blocking-time'].score * 100)} Total Blocking Time | ${
                  audits['total-blocking-time'].displayValue
                } |`,
              ].join('\n');

              comments += comment + '\n' + '\n' + detail + '\n';
            });
            core.setOutput('comments', comments);

      - name: Comment PR
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments}}
